# Import the choice function of the random module
# https://stackoverflow.com/questions/306400/how-to-randomly-select-an-item-from-a-list

import random

foo = ['a', 'b', 'c', 'd', 'e']
print(random.choice(foo))

# Assign to a list the 3 possible options: 'stone', 'paper' or 'scissors'.

possible_outcomes = ["stone", "paper", "scissors"]

# Assign a variable to the maximum number of games: 1, 3, 5, etc ...

max_num_games = 10
game = [5]

# Assign a variable to the number of games a player must win to win.
# Preferably the value will be based on the number of maximum games

for i in game:
    if i >= 6:
        print("player wins")
    elif i == 5:
        print("tie")
    else:
        print("player loses")

# Define a function that randomly returns one of the 3 options.
# This will correspond to the play of the machine. Totally random.

random_outcomes = random.choice(possible_outcomes)
print(random_outcomes)

# Define a function that asks your choice: 'stone', 'paper' or 'scissors'

def user_choice(possible_outcomes):

# you should only allow one of the 3 options. This is defensive programming.
# If it is not stone, paper or scissors keep asking until it is.


# Define a function that resolves a combat.
# Returns 0 if there is a tie, 1 if the machine wins, 2 if the human player wins


    machine_choice = [random_outcomes]

for i in machine_choice:
    if (possible_outcomes == machine_choice):
        print(tie)

possible_outcomes = scissors

user_choice(possible_outcomes)


    
# Define a function that shows the choice of each player and the state of the game
# This function should be used every time accumulated points are updated

    
# Create two variables that accumulate the wins of each participant


# Create a loop that iterates while no player reaches the minimum of wins
# necessary to win. Inside the loop solves the play of the
# machine and ask the player's. Compare them and update the value of the variables
# that accumulate the wins of each participant.


    
# Print by console the winner of the game based on who has more accumulated wins
  
